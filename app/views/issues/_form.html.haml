= f.inputs data: { controller: "date-time-picker" }  do
  = f.input :title, input_html: { data: { error: t(".max_length_error_html") }, maxlength: Issue::MAXLENGTH }
  - hint = (f.object.retained_photo ? "#{t('formtastic.hints.currently')} #{f.object.photo.name}" : t('formtastic.hints.issue.new.photo'))
  = f.input :photo, as: :file, hint: hint, input_html: { accept: 'image/*' }
  = f.input :retained_photo, as: :hidden
  = f.input :loc_json, as: :hidden
  = f.input :planning_application_id, as: :hidden
  %li.input.full-width
    - if current_group&.profile&.location
      %a.btn-green#use-group-location{href: "#", style: "font-size: 11px", data: { location: current_group.profile.loc_json} }
        = t(".use_groups_location")
    %label.label= t "formtastic.labels.issue.new.location"
    = f.semantic_errors :location
    = f.semantic_errors :size
    = render partial: "shared/edit_map", locals: {location: @start_location, f: f}
  = f.input :tags_string
  = f.input :description, input_html: { class: "tinymce" }
  = f.input :external_url, as: :url
  = f.inputs do
    = f.input :deadline, as: :date_picker, label: t("deadline_date"), input_html: {value: @issue.deadline.try(:strftime, "%d-%m-%Y %H:%M")}, wrapper_html: {style: "float: left; width: 60%"}
    = f.input :all_day, input_html: {class: "all-day"}, wrapper_html: {style: "float: right; width: 25%; padding: 20px 40px 20px 0"}

:javascript
  $(document).ready( function() {
    var title = $("#issue_title");
    var errors, titleLength;

    var createOrUpdateErrorCount = function(errorEl, count) {
      if (errorEl.html().indexOf("[") === -1) {
        errorEl.append(". ", title.data().error, title.attr("maxlength"), " [", count, "]");
      } else {
        errorEl.html(errorEl.html().replace(/\[.*?\]/g, "[" + count + "]") );
      }
    };

    var updateTitleErrorElement = function() {
      titleLength = title.val().length;
      errors = title.next();

      // If the lenght is less than maxlength remove any length count and return early
      if (titleLength <= title.attr("maxlength")){
        if (errors.hasClass("inline-errors")) {
          errors.html("");
        }
        return;
      }

      // If there is an existing inline-error element use it, if not create a new a one
      if (!errors.hasClass("inline-errors")) {
        errors = title.after("<p class=inline-errors></p>").next();
      }
      createOrUpdateErrorCount(errors, titleLength);
    };
    updateTitleErrorElement();

    title.bind("propertychange change click keyup input paste", updateTitleErrorElement);
  });
